import pefile
import sys
import argparse
import os
import pprint
import networkx
import re
from networkx.drawing.nx_agraph import write_dot
import collections
from networkx.algorithms import bipartite
from graphviz import Source

args = argparse.ArgumentParser("Visualizador de DLL compartilhadas na qual sao importadas seus relacionamentos entre um diretorio de malwares")

args.add_argument("target_path", help="diretorio com malwares")
args.add_argument("output_file", help="arquivo para escrever o .DOT")
args.add_argument("malware_projection", help="arquivo para escrever o .DOT")
args.add_argument("resource_projection", help="arquivo para escrever o .DOT")

args = args.parse_args()

# Inicio do programa
network = networkx.Graph()

# utilizando a funcao map, com lambda para cada linha do arquivo domain suffixes
# criamos e adicionamos em uma tupla
valid_hostname_suffixes = map(
    lambda string: string.strip(), open("domain_suffixes.txt")
)

valid_hostname_suffixes = set(valid_hostname_suffixes)

def find_hostnames(string):
    possible_hostnames = re.findall(r'(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]{,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}', string)
    valid_hostnames = filter(
        lambda hostname: hostname.split(".")[-1].lower() in valid_hostname_suffixes,
            possible_hostnames
    )

    return valid_hostnames

# procura no argumento do diretorio por arquivos PE's
for root, dirs, files in os.walk(args.target_path):
    for path in files:
        # tenta abrir o arquivo para poder verificar se e um PE
        try:
            pe = pefile.PE(os.path.join(root,path))
        except pefile.PEFormatError:
            continue

        fullpath = os.path.join(root,path)

        # roda o comando strings no arquivo
        strings = os.popen("strings '{}'".format(fullpath)).read()

        # usa a funcao search_doc da lib re pra achar hostnames
        hostnames = find_hostnames(strings)

        if len(hostnames):
            # adiciona os nos e beiras da rede bipartidaria
            network.add_node(path,label=path[:32],color='red', penwidth=5, bipartite=0)
        for hostname in hostnames:
            network.add_node(hostname, label=hostname,color='blue', penwidth=10, bipartite=1)
            network.add_edge(hostname,path,penwidth=2)
        
        if hostnames:
            print("Extracted hostnames from : "+path)
            pprint.pprint(hostnames)
        

# escreve o arquivo .dot para o disco
write_dot(network,args.output_file)

malware = set(n for n, d in network.nodes(data=True) if d['bipartite']==0)
hostname = set(network)-malware

malware_network = bipartite.projected_graph(network, malware)
hostname_network = bipartite.projected_graph(network, hostname)

write_dot(malware_network, args.malware_projection)
write_dot(hostname_network, args.resource_projection)

s = Source.from_file(args.malware_projection,format="png")
s.view()

v = Source.from_file(args.resource_projection,format="png")
v.view()