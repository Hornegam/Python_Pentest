#!/usr/bin/env python

import sys
try:
    import netifaces
except:
    print("[!] Install the netifaces library: netifaces")
    os.system("pip3 install netifaces")
try:
    import nmap
except:
    sys.exit("[!] Instale as dependencias da biblioteca do nmap : pip install python-nmap")


if len(sys.argv) != 5:
    sys.exit("[!] Coloque por favor 4 argumentos, sendo o primeiro o IP, segundo a PORTA, terceiro o USUARIO e quarto a SENHA")

password = str(sys.argv[4])
user = str(sys.argv[3])
port = str(sys.argv[2])
ip = str(sys.argv[1])

home_dir="/root"
gateways = {}
network_ifaces={}

def get_interfaces():
    interfaces = netifaces.interfaces()
    return interfaces
def get_gateways():
    gateway_dict = {}
    gws = netifaces.gateways()
    for gw in gws:
        try:
            gateway_iface = gws[gw][netifaces.AF_INET]
            gateway_ip, iface = gateway_iface[0], gateway_iface[1]
            gw_list =[gateway_ip, iface]
            gateway_dict[gw]=gw_list
        except:
            pass
    return gateway_dict

def get_addresses(interface):
    addrs = netifaces.ifaddresses(interface)
    link_addr = addrs[netifaces.AF_LINK]
    iface_addrs = addrs[netifaces.AF_INET]
    iface_dict = iface_addrs[0]
    link_dict = link_addr[0]
    hwaddr = link_dict.get('addr')
    iface_addr = iface_dict.get('addr')
    iface_broadcast = iface_dict.get('broadcast')
    iface_netmask = iface_dict.get('netmask')
    return hwaddr, iface_addr, iface_broadcast, iface_netmask

def get_networks(gateways_dict):
    networks_dict = {}
    for key, value in gateways.iteritems():
        gateway_ip, iface = value[0], value[1]
        hwaddress, addr, broadcast, netmask = get_addresses(iface)
        network = {'gateway': gateway_ip, 'hwaddr' : hwaddress, 'addr' : addr, 'broadcast' : broadcast, 'netmask' : netmask}
        networks_dict[iface] = network
    return networks_dict

def target_indentifier(dir,user,passwd,ips,port_num,ifaces):
    bufsize=0
    ssh_hosts="%s/ssh_hosts"%(dir)
    scanner = nmap.PortScanner()
    scanner.scan (ips,port_num)
    open(ssh_hosts,'w').close()
    if scanner.all_hosts():
        e = open(ssh_hosts,'a',bufsize)
    else:
        sys.exit("[!] Nao foi encontrado alvos viaveis.")
    for host in scanner.all_hosts():
        for k,v in ifaces.iteritems():
            if v['addr'] == host:
                print("[.] Removendo %s da lista, pois e a sua interface !") %(host)
                host = None
        if host != None:
            home_dir="/root"
            ssh_hosts = ssh_hosts="%s/ssh_hosts"%(home_dir)
            bufsize=0
            e = open(ssh_hosts,'a',bufsize)
            if 'ssh' in scanner[host]['tcp'][int(port_num)]['name']:
                if 'open' in scanner[host]['tcp'][int(port_num)]['state']:
                    print("[.] Adicionando %s na lista %s, pois esta ativo na porta %s !") %(host,ssh_hosts,port_num)
                    hostdata = host+"\n"
                    e.write(hostdata)
    if not scanner.all_hosts():
        e.closed
    if ssh_hosts:
        return ssh_hosts
                

def resource_file_builder(dir,user,passwd,ips,port_num,hosts_file):
    ssh_login_rc = "%s/ssh_login.rc"%(dir)
    bufsize=0
    set_module = "use auxiliary/scanner/ssh/ssh_login \n"
    set_user = "set username "+ user + "\n"
    set_pass = "set password "+ password + "\n"
    set_rhosts = "set rhosts file: "+ hosts_file + "\n"
    set_rport = "set rport "+ port + "\n"
    execute = "run \n"
    f = open(ssh_login_rc,'w',bufsize)
    f.write(set_module)
    f.write(set_user)
    f.write(set_pass)
    f.write(set_rhosts)
    f.write(execute)
    f.closed


if __name__ == '__main__':
    gateways = get_gateways()
    network_ifaces = get_networks(gateways)
    hosts_file = target_indentifier(home_dir,user,password,ip,port,network_ifaces)
    resource_file_builder(home_dir,user,password,ip,port,hosts_file)
#print(network_ifaces)
